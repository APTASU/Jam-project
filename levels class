import pygame, math, random
from enemies import Enemies

class Levels:
  def levels():
    score = 100
    levelFile = open('levels.txt', 'r')
  
  
    # Set up window
    width, height = 640, 480
    screen = pygame.display.set_mode((width, height))
    
    # Set up game objects
    clock = pygame.time.Clock()
    clockCount = 0
    fps = 165
    
    square = pygame.Rect(0, 100, 32, 32)
    square_color = (255, 255, 255)
    falling = True
    platforms = []
    platform_color = (128, 128, 128)
    platformXpos = 0
    platformYpos = 0
    found_platform = False
    
    enemies = []
    spawners = []
    
    for line in levelFile:
        for character in line:
            if character == '$':
                platform = pygame.Rect(platformXpos, platformYpos, 32, 32)
                platforms.append(platform)
                platformXpos = platformXpos + 32
            if character == ' ':
                platformXpos = platformXpos + 32
            if character == '@':
                platformXpos = platformXpos + 32
                square = pygame.Rect(platformXpos, platformYpos, 30, 30)
            if character == '0':
                enemy = pygame.Rect(platformXpos,platformYpos, 32,32)
                enemies.append([enemy,0,0,False])
                platformXpos = platformXpos + 32
            if character == '1':
                enemy = pygame.Rect(platformXpos,platformYpos, 32,32)
                enemies.append([enemy,1,0,False])
                platformXpos = platformXpos + 32
            if character == '2':
                enemy = pygame.Rect(platformXpos,platformYpos, 32,32)
                enemies.append([enemy,2,0,False])
                platformXpos = platformXpos + 32
            if character == '3':
                enemy = pygame.Rect(platformXpos,platformYpos, 32,32)
                enemies.append([enemy,3,0,False])
                platformXpos = platformXpos + 32
            if character == '4':
                enemy = pygame.Rect(platformXpos,platformYpos, 32,32)
                enemies.append([enemy,4,0,False])
                platformXpos = platformXpos + 32
            if character == '5':
                enemy = pygame.Rect(platformXpos,platformYpos, 32,32)
                enemies.append([enemy,5,0,False])
                platformXpos = platformXpos + 32
            if character == '6':
                enemy = pygame.Rect(platformXpos,platformYpos, 32,32)
                enemies.append([enemy,6,0,False])
                platformXpos = platformXpos + 32
            if character == '7':
                enemy = pygame.Rect(platformXpos,platformYpos, 64,64)
                enemies.append([enemy,7,0,False,0])
                platformXpos = platformXpos + 32
            if character == '8':
                enemy = pygame.Rect(platformXpos,platformYpos, 64,64)
                enemies.append([enemy,8,0,False])
                platformXpos = platformXpos + 32
            if character == '9':
                enemy = pygame.Rect(platformXpos,platformYpos, 128,128)
                enemies.append([enemy,0,0,False])
                platformXpos = platformXpos + 32
            if character == '!':
                wait = fps * 10
                spawner = [platformXpos,platformYpos,32,32,wait,3,1]
                spawners.append(spawner)
                platformXpos = platformXpos + 32
            if character == '?':
                wait = fps * 10
                spawner = [platformXpos,platformYpos,32,32,wait,5,1]
                spawners.append(spawner)
                platformXpos = platformXpos + 32
                platformXpos = platformXpos + 32
            if character == '.':
                wait = fps * 10
                spawner = [platformXpos,platformYpos,32,32,wait,6,1]
                spawners.append(spawner)
                platformXpos = platformXpos + 32
            if character == '[':
                wait = fps * 30
                spawner = [platformXpos,platformYpos,64,64,wait,7,1]
                spawners.append(spawner)
                platformXpos = platformXpos + 32
            if character == ']':
                wait = fps * 30
                spawner = [platformXpos,platformYpos,64,64,wait,8,1]
                spawners.append(spawner)
                platformXpos = platformXpos + 32
        platformYpos = platformYpos + 32
        platformXpos = 0
    
    
    enemy_color = (255, 0, 0)
    
    
    
    mouse_x, mouse_y = pygame.mouse.get_pos()
    angle = math.atan2(mouse_y - square.centery, mouse_x - square.centerx)
    gun_color = (255, 0, 0)
    gun_width = 3
    
    #add enemy ai
    
    
    bullets = []
    bullet_speed = 8
    bullets_allowed = 3
    
    #test vars
    okCount = 0
    z=0
    
    #player info
    player_speed = 4
    gravity = 0.1
    falling_speed = 0
     
    jump_height = 5
    jump_state = False
    
    running = True
    while running:
        v = square.y
        # Handle events
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            if event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:
                running = False
            if event.type == pygame.MOUSEBUTTONUP and event.button == 1:
                mouse_x, mouse_y = pygame.mouse.get_pos()
                angle = math.atan2(mouse_y - square.centery, mouse_x - square.centerx)
                bullet = {'start': square.center, 'angle': angle, 'color': (255, 255, 0)}
                bullets.append(bullet)
        
        # Update game state
        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT]:
            square.x -= player_speed
        if keys[pygame.K_RIGHT]:
            square.x += player_speed
        if keys[pygame.K_UP] and not jump_state:
            jump_state = True
    
        
        for spawner in spawners:
            if square.x + 700 > spawner[0] > square.x - 700 and square.y + 700 > spawner[1] > square.y - 700:
                if spawner[4] < spawner[6]:
                    enemy = pygame.Rect(spawner[0],spawner[1],spawner[2],spawner[3])
                    enemies.append([enemy,spawner[5],0,False])
                    spawner[6] = 1
            
                else:
                    spawner[6] += 1
        
        if jump_state:
            square.y -= jump_height
        #Handle enemy movement
        for enemy in enemies:
            if square.x + 500 > enemy[0].x > square.x - 500 and square.y + 500 > enemy[0].y > square.y - 500:
                enemy[3] = False
                for platform in platforms:
                    enemy_ground = Enemies(enemy[0],None,None,None,enemy[2],platform,None)
                    y = enemy_ground.groundedEnemy()
                    enemy[2] = y[0]
                    if y[1]:
                      enemy[3] = y[1]
                        
                enemy_move = Enemies(enemy[0], square,enemy[1], gravity, enemy[2],None,enemy[3])
                x = enemy_move.enemyType()
                enemy[0].x = x[0]
                enemy[0].y = x[1]
                enemy[2] = x[2]  
    
        #if enemy is hit by bullet
        for enemy in enemies:
            for bullet in bullets:
                if enemy[0].left <= bullet['start'][0] <= enemy[0].right:
                    if enemy[0].top <= bullet['start'][1] <= enemy[0].bottom:
                        enemies.remove(enemy)
                        bullets.remove(bullet)
                        score += 100
        
        for enemy in enemies:
            if enemy[0].left <= square.right and square.left <= enemy[0].right:
                if enemy[0].top <= square.bottom and square.top <= enemy[0].bottom:   
                    running = False
          
        
        
          
    
        if falling:
            falling_speed += gravity
        square.y += falling_speed
    
        
        falling = True
        v -= square.y
        for platform in platforms:
            if platform.topleft <= square.bottomright and square.bottomleft <= platform.topright:
                if square.bottom >= platform.top and square.top <= platform.top:
                    if v <= 0:
                            falling_speed = 0
                            jump_state = False
                            falling = False
                            square.bottom = platform.top
                            break
                    
    
        
        mouse_x, mouse_y = pygame.mouse.get_pos()
        angle = math.atan2(mouse_y - square.centery, mouse_x - square.centerx)
    
        # Set gun position
        gun_end = (square.centerx + 20 * math.cos(angle), square.centery + 20 * math.sin(angle))
    
        # Draw game objects
        screen.fill((0, 0, 0))
    
        for platform in platforms:
            if square.x + 500 > platform.x > square.x - 500 and square.y + 500 > platform.y > square.y - 500:
                pygame.draw.rect(screen, platform_color, platform)
    
        for enemy in enemies:
            if square.x + 500 > enemy[0].x > square.x - 500 and square.y + 500 > enemy[0].y > square.y - 500:
                pygame.draw.rect(screen, enemy_color, enemy[0])
        
    
        pygame.draw.rect(screen, square_color, square)
        
        pygame.draw.line(screen, (255, 0, 0), (square.centerx, square.centery), (gun_end), gun_width)
    
        screen_offset_x = width/2 - square.centerx
        screen_offset_y = height/2 - square.centery
    
        # update the platform and rectangle position
        for platform in platforms:
            platform.x += screen_offset_x
            platform.y += screen_offset_y
        square.x += screen_offset_x
        square.y += screen_offset_y
        for enemy in enemies:
          enemy[0].x += screen_offset_x
          enemy[0].y += screen_offset_y
    
        if len(bullets) > bullets_allowed:
            del bullets[0]
        for bullet in bullets:
            if not square.x-500 <= bullet['start'][0] <= square.x +500 or not square.y - 500 <= bullet['start'][1] <= square.y +500:
                del bullets[0]
    
        for bullet in bullets:
            bullet_x = bullet['start'][0] + bullet_speed * math.cos(bullet['angle']) + screen_offset_x
            bullet_y = bullet['start'][1] + bullet_speed * math.sin(bullet['angle']) + screen_offset_y
            bullet_end = (bullet_x, bullet_y)
            pygame.draw.circle(screen, bullet['color'], (int(bullet_x), int(bullet_y)), 2, 3)
            bullet['start'] = bullet_end
    
        pygame.display.update()
        
        # Control frame rate
        clock.tick(fps)
