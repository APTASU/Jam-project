import pygame, math

# Initialize Pygame
pygame.init()

# Set the window size and title
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Pygame Rectangle Movement")

# Constants
RECT_WIDTH, RECT_HEIGHT = 50, 50
PLATFORM_WIDTH, PLATFORM_HEIGHT = 800, 100
JUMP_SPEED = 2
GRAVITY = 0.01
BULLET_RADIUS = 5
BULLET_SPEED = 0.5

# Create a rectangle with a starting position
rect = pygame.Rect(50, 50, RECT_WIDTH, RECT_HEIGHT)
rect_color = (255, 0, 0)
rect_speed = 1

# Create a platform
platform = pygame.Rect(0, 500, PLATFORM_WIDTH, PLATFORM_HEIGHT)
platform_color = (0, 255, 0)

# Jumping variables
jump_state = False
jump_count = 10
fall_speed = 1

# Create an enemy rectangle with a starting position
enemy = pygame.Rect(600, 300, RECT_WIDTH, RECT_HEIGHT)
enemy_color = (0, 0, 255)
enemy_fall_speed = 0
enemy_gravity = 0.01

# Create a bullet
bullet = None
bullet_fired = False

# Main game loop
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
            bullet = pygame.Rect(rect.centerx, rect.centery, BULLET_RADIUS*2, BULLET_RADIUS*2)
            mouse_x, mouse_y = pygame.mouse.get_pos()
            bullet_dx = mouse_x - bullet.x
            bullet_dy = mouse_y - bullet.y
            bullet_distance = math.sqrt(bullet_dx**2 + bullet_dy**2)
            bullet_dx /= bullet_distance
            bullet_dy /= bullet_distance
            bullet_fired = True

    # Move the rectangle left or right based on which arrow keys are pressed
    keys = pygame.key.get_pressed()
    if keys[pygame.K_LEFT]:
        rect.x -= rect_speed
    if keys[pygame.K_RIGHT]:
        rect.x += rect_speed

    # Check if the spacebar is pressed and the jump state is not active
    if keys[pygame.K_SPACE] and not jump_state:
        jump_state = True

    # Update jumping variables
    if jump_state:
        rect.y -= JUMP_SPEED
        jump_count -= 1
    else:
        fall_speed += GRAVITY
        rect.y += fall_speed

    # Check if the rectangle is colliding with the platform
    if rect.collide
