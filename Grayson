import pygame, math

# Initialize game engine
pygame.init()

# Set up window
width, height = 640, 480
screen = pygame.display.set_mode((width, height))

# Set up game objects
clock = pygame.time.Clock()

square = pygame.Rect(0, 100, 32, 32)
square_color = (255, 255, 255)

enemy = pygame.Rect(300, 100, 32, 32)
enemy_color = (255, 0, 0)

platform = pygame.Rect(0, height - 32, width, 32)
platform_color = (128, 128, 128)


mouse_x, mouse_y = pygame.mouse.get_pos()
angle = math.atan2(mouse_y - square.centery, mouse_x - square.centerx)
gun_color = (255, 0, 0)
gun_width = 3


bullets = []
bullet_speed = 1

#player info
player_speed = 4
gravity = 0.05
falling_speed = 0
e_falling_speed = 0
jump_height = 10
jump_state = False

running = True
while running:
    # Handle events
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:
            running = False
        if event.type == pygame.MOUSEBUTTONUP and event.button == 1:
            mouse_x, mouse_y = pygame.mouse.get_pos()
            angle = math.atan2(mouse_y - square.centery, mouse_x - square.centerx)
            bullet = {'start': square.center, 'angle': angle, 'color': (255, 255, 0)}
            bullets.append(bullet)
    
    # Update game state
    keys = pygame.key.get_pressed()
    if keys[pygame.K_LEFT]:
        square.x -= player_speed
    if keys[pygame.K_RIGHT]:
        square.x += player_speed
    if keys[pygame.K_UP] and not jump_state:
        jump_state = True


    if square.bottom < platform.top:
        falling_speed += gravity
    square.y += falling_speed

    if jump_state:
        square.y -= player_speed
        jump_height -= 1

    if square.bottom >= platform.top:
        falling_speed = 0
        jump_state = False
        square.bottom = platform.top

    if enemy.bottom < platform.top:
        e_falling_speed += gravity
    enemy.y += e_falling_speed
    if enemy.bottom >= platform.top:
        e_falling_speed = 0
        enemy.bottom = platform.top



    mouse_x, mouse_y = pygame.mouse.get_pos()
    angle = math.atan2(mouse_y - square.centery, mouse_x - square.centerx)

    # Set gun position
    gun_end = (square.centerx + 20 * math.cos(angle), square.centery + 20 * math.sin(angle))

    # Draw game objects
    screen.fill((0, 0, 0))
    pygame.draw.rect(screen, square_color, square)
    pygame.draw.rect(screen, platform_color, platform)
    pygame.draw.rect(screen, enemy_color, enemy)

    for bullet in bullets:
        bullet_x = bullet['start'][0] + bullet_speed * math.cos(bullet['angle'])
        bullet_y = bullet['start'][1] + bullet_speed * math.sin(bullet['angle'])
        bullet_end = (bullet_x, bullet_y)
        pygame.draw.circle(screen, bullet['color'], (int(bullet_x), int(bullet_y)), 2, 3)
        bullet['start'] = bullet_end
    

    pygame.draw.line(screen, (255, 0, 0), (square.centerx, square.centery), (gun_end), gun_width)

    screen_offset_x = width/2 - square.centerx
    screen_offset_y = height/2 - square.centery

    # update the platform and rectangle position
    platform.x += screen_offset_x
    platform.y += screen_offset_y
    square.x += screen_offset_x
    square.y += screen_offset_y
    enemy.x += screen_offset_x
    enemy.y += screen_offset_y

    pygame.display.update()
    
    # Control frame rate
    clock.tick(165)

# Clean up
pygame.quit()
