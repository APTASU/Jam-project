import pygame, math, random
from Enemies import Enemies
levelFile = open('levels.txt', 'r')

# Initialize game engine
pygame.init()

enemy_type = 6
# Set up window
width, height = 640, 480
screen = pygame.display.set_mode((width, height))

# Set up game objects
clock = pygame.time.Clock()
clockCount = 0
fps = 165

square = pygame.Rect(0, 100, 32, 32)
square_color = (255, 255, 255)

platforms = []
platform_color = (128, 128, 128)
platformXpos = 0
platformYpos = 0
found_platform = False

for line in levelFile:
    for character in line:
        if character == '$':
            platform = pygame.Rect(platformXpos, platformYpos, 32, 32)
            platforms.append(platform)
            platformXpos = platformXpos + 32
        if character == ' ':
            platformXpos = platformXpos + 32
        if character == '@':
            platformXpos = platformXpos + 32
            square = pygame.Rect(platformXpos, platformYpos, 30, 30)
    platformYpos = platformYpos + 32
    platformXpos = 0

enemy = pygame.Rect(300, 100, 32, 32)
enemy_color = (255, 0, 0)



mouse_x, mouse_y = pygame.mouse.get_pos()
angle = math.atan2(mouse_y - square.centery, mouse_x - square.centerx)
gun_color = (255, 0, 0)
gun_width = 3

#add enemy ai


bullets = []
bullet_speed = 10

#test vars
okCount = 0
z=0

#player info
player_speed = 4
gravity = 0.1
falling_speed = 0
enemy_v = 0 
jump_height = 5
jump_state = False

running = True
while running:
    v = square.y
    # Handle events
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:
            running = False
        if event.type == pygame.MOUSEBUTTONUP and event.button == 1:
            mouse_x, mouse_y = pygame.mouse.get_pos()
            angle = math.atan2(mouse_y - square.centery, mouse_x - square.centerx)
            bullet = {'start': square.center, 'angle': angle, 'color': (255, 255, 0)}
            bullets.append(bullet)
    
    # Update game state
    keys = pygame.key.get_pressed()
    if keys[pygame.K_LEFT]:
        square.x -= player_speed
    if keys[pygame.K_RIGHT]:
        square.x += player_speed
    if keys[pygame.K_UP] and not jump_state:
        jump_state = True


    if jump_state:
        square.y -= jump_height
        
        
    
    grounded = ["",False]
    for platform in platforms:
        enemy_ground = Enemies(enemy,None,None,None,enemy_v,platform,None)
        y = enemy_ground.groundedEnemy()
        enemy_v = y[0]
        if y[1]:
          grounded = y.copy()
            
    
    enemy_move = Enemies(enemy, square,enemy_type, gravity, enemy_v,None,grounded[1])
    x = enemy_move.enemyType()
    enemy.x = x[0]
    enemy.y = x[1]
    enemy_v = x[2]
    
      

    if square.bottom < platform.top:
        falling_speed += gravity
    square.y += falling_speed

    
        
    v -= square.y
    for platform in platforms:
        if platform.topleft <= square.bottomright and square.bottomleft <= platform.topright:
            if square.bottom >= platform.top and square.top <= platform.top:
                if v <= 0:
                        falling_speed = 0
                        jump_state = False
                        square.bottom = platform.top
                        break
                

    
    mouse_x, mouse_y = pygame.mouse.get_pos()
    angle = math.atan2(mouse_y - square.centery, mouse_x - square.centerx)

    # Set gun position
    gun_end = (square.centerx + 20 * math.cos(angle), square.centery + 20 * math.sin(angle))

    # Draw game objects
    screen.fill((0, 0, 0))

    for platform in platforms:
        pygame.draw.rect(screen, platform_color, platform)


    

    pygame.draw.rect(screen, square_color, square)
    pygame.draw.rect(screen, enemy_color, enemy)
    pygame.draw.line(screen, (255, 0, 0), (square.centerx, square.centery), (gun_end), gun_width)

    screen_offset_x = width/2 - square.centerx
    screen_offset_y = height/2 - square.centery

    # update the platform and rectangle position
    for platform in platforms:
        platform.x += screen_offset_x
        platform.y += screen_offset_y
    square.x += screen_offset_x
    square.y += screen_offset_y
    enemy.x += screen_offset_x
    enemy.y += screen_offset_y

    for bullet in bullets:
        bullet_x = bullet['start'][0] + bullet_speed * math.cos(bullet['angle']) + screen_offset_x
        bullet_y = bullet['start'][1] + bullet_speed * math.sin(bullet['angle']) + screen_offset_y
        bullet_end = (bullet_x, bullet_y)
        pygame.draw.circle(screen, bullet['color'], (int(bullet_x), int(bullet_y)), 2, 3)
        bullet['start'] = bullet_end

    pygame.display.update()
    
    # Control frame rate
    clock.tick(fps)

# Clean up
pygame.quit()
